#	$OpenBSD: pf.conf,v 1.54 2014/08/23 05:49:42 deraadt Exp $
#
# See pf.conf(5) and /etc/examples/pf.conf

# read the log file: tcpdump -n -e -ttt -r /var/log/pflog
# real-time logging: tcpdump -neq -ttt -i pflog0
#                    tcpdump -nettti pflog0 action drop
#		     tcpdump -vvopn -i enc0
# show queue: pfctl -vvs queue
#             systat queues
# show stats: pfctl -s info
#             systat pf
# show states: pfctl -s states
#              systat states
# table stats: pfctl -v -t martians -T show
# show rule nr. 4: pfctl -v -s rules -R 4
# show rules, prepend rule numbers: pfctl -vvs rules
#                                   systat rules
# show limits: pfctl -s memory

# Port Knocking
#portknock1=53
#portknock2=80
#portknock3=443

# https://www.iana.org/assignments/iana-ipv4-special-registry/
# https://www.iana.org/assignments/iana-ipv6-special-registry/
table <martians> const persist counters { \
 0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 169.254.0.0/16 \
 172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 192.168.0.0/16 198.18.0.0/15 \
 198.51.100.0/24 203.0.113.0/24 240.0.0.0/4 255.255.255.255/32 \
 ::1/128 ::/128 ::/96 ::ffff:0:0/96 100::/64 2001::/32 2001:2::/48 \
 2001:db8::/32 fc00::/7 fe80::/10 }

# full access (for test)
table <knownhosts> persist counters {}

# Enable with: touch /etc/authpf/authpf.conf
table <authpf_users> persist counters

# block bad hosts for 10-11 minutes (!) see var/cron/tabs/root
table <temporaryban> persist counters
table <permanentban> persist counters file "/etc/pf.permanentban"

# Update the adhosts IP list every month (!) see var/cron/tabs/root
table <adhosts> persist counters file "/etc/pf.adhosts"

# Update the malware IP list every month (!) see var/cron/tabs/root
table <malware> persist counters file "/etc/pf.malware"

# Clear (IPs older than 60 sec) portknock1 and portknock2 every 5 minutes
# Clear portknock3 every hour (!) see var/cron/tabs/root
table <portknock1> persist
table <portknock2> persist
table <portknock3> persist

# Options
set loginterface egress
set optimization normal
set block-policy drop
set skip on { lo0 }

# Queues
# http://man.openbsd.org/pf.conf#QUEUEING
# queue assignment before nat-to http://marc.info/?l=openbsd-misc&m=149163915901383&w=2
queue rootq on em0 bandwidth 20M max 20M
queue web parent rootq bandwidth 10M burst 18M for 100ms
queue mail parent rootq bandwidth 2M
queue ssh parent rootq bandwidth 4M
queue  ssh_interactive parent ssh bandwidth 1M min 0.5M
queue  ssh_bulk parent ssh bandwidth 3M
queue domain parent rootq bandwidth 500K
queue icmp parent rootq bandwidth 500K
queue std parent rootq bandwidth 5M default # +3

anchor "queues" out on egress {
 anchor "icmp6" proto icmp6 {
  match log \
   set queue icmp
 }
 anchor "icmp" proto icmp {
  # tag for NAT
  match log \
   from ! (egress:network) \
   set queue icmp \
   tag LAN_INET
  # from self
  match log \
   set queue icmp \
   ! tagged LAN_INET
 }
 anchor "udp" proto udp {
  match log proto udp \
   from (egress:network) \
   to port { bootps domain ntp isakmp ipsec-nat-t dhcpv6-server } \
   set queue domain
 }
 anchor "tcp" proto tcp {
  match log proto tcp \
   to port { http https } \
   set queue web
  match log proto tcp \
   to port { pop3 pop3s imap imaps smtps submission } \
   set queue mail
  match log proto tcp \
   to port ssh \
   set queue (ssh_bulk, ssh_interactive)
 }
}

# Sanitizing packet content
# http://man.openbsd.org/pf.conf#Scrub
# no-df + random-id = unique IP identifiers
# max-mss must match net.inet.tcp.mssdflt in /etc/sysctl.conf
anchor "scrub" in {
 match in all scrub (no-df random-id max-mss 1440)
}

# NAT
anchor "nat" out on egress inet tagged LAN_INET {
 match out log \
 nat-to (egress:0) port 1024:65535 \
 tag LAN_INET_NAT
}

# Classification -- classify packets based on the defined firewall policy.

# Block spoofed traffic
# http://man.openbsd.org/pf.conf#Blocking_Spoofed_Traffic
antispoof log quick for { (egress) lo0 (tun) (vether) (enc) }
antispoof log for { (lan) (wlan) } # why not quick? We allow them on enc

anchor "block" {
 block log all

 anchor in {
  # Confound network scanners
  block log quick proto tcp all flags SF/SFRA
  ##block log quick proto tcp all flags SFUP/SFRAU
  block log quick proto tcp all flags FPU/SFRAUP
  block log quick proto tcp all flags /SFRA
  block log quick proto tcp all flags F/SFRA
  block log quick proto tcp all flags U/SFRAU
  ##block log quick proto tcp all flags P
  block log quick proto tcp all flags FUP/FUP

  anchor on egress {
   # Block incoming bad packets
   block log quick inet  proto icmp  all icmp-type  redir
   block log quick inet6 proto icmp6 all icmp6-type redir

   # Block incoming traffic from the undesirable
   block log quick \
    from { <martians> no-route urpf-failed <temporaryban> <permanentban> <malware> }
  }
 }

 anchor out {
  anchor on egress {
   # Block outgoing traffic to the undesirable, and tell us it's blocked
   block return log quick \
    to { <martians> no-route <adhosts> <malware> } set queue std

   # Block outgoing traffic that hasn't been translated
   block log quick inet from ! (egress:0)
  }
 }
}

anchor "external" on egress {
 anchor out {
  anchor "inet" inet tagged LAN_INET_NAT {
   pass log
  }
  anchor "inet6" inet6 tagged LAN6_INET6 {
   pass log
  }
  anchor "self" from (egress) {
   pass log (user) proto udp \
    to port domain \
    user { _unbound root } \
    tag SELF_INET
   pass log (user) proto udp \
    to port ntp \
    user { _ntp root } \
    tag SELF_INET
   pass log (user) proto udp \
    from port bootpc to port bootps \
    tag SELF_INET
#  pass log inet6 proto udp \
#   from port dhcpv6-client to ff02::1:2 port dhcpv6-server \
#   tag SELF_INET
   pass log (user) proto tcp \
    to port { http https } \
    user { _ntp _pfetch _pkgfetch _syspatch root horia } \
    tag SELF_INET
   pass log (user) proto tcp \
    to port ftp \
    user _ftp_proxy
   pass log (user) proto tcp \
    to port { ssh whois } \
    user { root horia } \
    tag SELF_INET

   # HE.net (6in4)
   pass log proto ipv6 \
    to 216.66.38.58 \
    keep state (if-bound)
  }
 }
 anchor in {
  # HE.net (6in4)
  pass log proto ipv6 \
   from 216.66.38.58 to (egress) \
   keep state (if-bound)

# pass log inet6 proto udp \
#  to (egress) port dhcpv6-client \
#  tag INET_SELF
 }
}

# Anchor rules for various authenticated peers
# all child anchors (/*) within authpf anchor (loaded from
# /etc/authpf/users/$USER/authpf.rules) will be evaluated
anchor "authpf/*" from <authpf_users>
match inet  tag LAN_INET   tagged AUTHPF_INET
match inet6 tag LAN6_INET6 tagged AUTHPF_INET

anchor "internal" on { lan wlan enc tun } {
 anchor in {
  # DHCPv6 Server for DNS requests
  anchor inet6 proto udp from port dhcpv6-client to port dhcpv6-server {
   pass log from fe80::/10 to ff02::1:2
   anchor on { enc tun } {
    pass log from fe80::/10 to ff02::1:2 keep state (if-bound)
   }
  }

  # Incoming traffic from trusted peers to LAN (VPN:network hack)
  anchor from { <knownhosts> <authpf_users> } to { (self:network) (tun)/24 (enc)/64 (enc)/24 } {
   anchor on { lan wlan } {
    pass log proto { tcp udp } tag LAN
   }
   anchor on { enc tun } {
    pass log proto { tcp udp } keep state (if-bound) tag LAN tagged VPN
   }
  }

  # Incoming traffic from trusted peers to LAN_INET
  anchor from <knownhosts> ! tagged LAN {
   pass log proto { tcp udp } tag LAN_INET
   anchor on { enc tun } {
    pass log proto { tcp udp } keep state (if-bound) tag LAN_INET
   }
  }

  # ftp for trusted peers
  anchor inet proto tcp to port ftp tagged LAN_INET {
   pass log flags S/SAFR modulate state divert-to vether0 port 8021
  }
  anchor inet6 proto tcp to port ftp tagged LAN6_INET6 {
   pass log flags S/SAFR modulate state divert-to fd80:1fe9:fcee:1337::ace:face port 8021
  }

  # and guests

  # www to LAN_INET
  anchor proto tcp to ! (self:network) port { http https } {
   anchor on { lan wlan } {
    pass log tag LAN_INET
   }
   anchor on { enc tun } {
    pass log keep state (if-bound) tag LAN_INET tagged VPN
   }
  }

  # ssh to LAN_SELF
  anchor proto tcp to (vether0) port ssh {
   anchor on { lan wlan } {
    pass log tag LAN_SELF
   }
   anchor on { enc tun } {
    pass log keep state (if-bound) tagged VPN
   }
  }
 }

 anchor out {
  # DHCPv6 Server for DNS requests
# pass log inet6 proto udp \
#  from { (lan) (wlan) } to fe80::/10 port dhcpv6-client \
#  tag SELF6_LAN6

  # Open LAN for trusted peers
  anchor tagged LAN {
   pass log proto { tcp udp }
   anchor on { enc tun } {
    pass log proto { tcp udp } keep state (if-bound)
   }
  }
  # Open LAN for self, skip VPN
  anchor proto { tcp udp } from (self) port { != isakmp, != ipsec-nat-t, != l2tp } {
   pass log proto { tcp udp }
   anchor on { enc tun } {
    pass log proto { tcp udp } keep state (if-bound)
   }
  }

 }

 # inet6 to LAN6_INET6
 anchor inet6 tagged LAN_INET {
  match tag LAN6_INET6
 }
}

# Secure forward ftp proxy

# http://man.openbsd.org/ftp-proxy
anchor "ftp-proxy/*"
pass log tagged FTP_PROXY
pass log tagged FTP_PROXY6

# VPN (IKEv1 and IKEv2)
anchor "vpn" {

 anchor on { egress lan wlan } {
  # Allow ESP encapsulated IPsec traffic
  pass in  log proto esp \
   to   { (egress) (lan) (wlan) }
  pass out log proto esp \
   from { (egress) (lan) (wlan) }

  # Only isakmp (500) for IPsec config before l2tp (1701)
  # Enable NAT transversal (4500)
  pass in log proto udp \
   to   { (egress) (lan) (wlan) } port {isakmp, ipsec-nat-t}
  pass out log proto udp \
   from { (egress) (lan) (wlan) } port {isakmp, ipsec-nat-t}
 }

 anchor on enc {
  # IP-in-IP traffic flowing between gateways on the enc(4) interface
  pass in  log proto ipencap \
   to   { (egress) (lan) (wlan) } keep state (if-bound)
  pass out log proto ipencap \
   from { (egress) (lan) (wlan) } keep state (if-bound)

  # Filter unencrypted VPN traffic on the enc(4) interface
  pass in  log proto udp \
   to   { (egress) (lan) (wlan) } port l2tp keep state (if-bound)
  pass out log proto udp \
   from { (egress) (lan) (wlan) } port l2tp keep state (if-bound)
 }

 # https://developer.android.com/reference/java/net/InetAddress.html#isReachable(int)
 pass in log on { enc tun } proto tcp  \
  to { (egress) (lan) (wlan) (vether) (tun) (enc) } port echo \
  keep state (if-bound) \
  tagged VPN
}

# RELAYD
anchor "relayd/*"

anchor "layer3_int" in tagged RELAYD {
 pass log
 anchor "layer3_vpn" on { enc tun } {
  pass log keep state (if-bound)
 }
}

anchor "layer7" in {
 anchor "layer7_ext" on egress {
  # Avoid interface certificate for egress
  pass in log inet proto tcp to (egress) port https rdr-to (athn0)
  pass in log inet6 proto tcp to (egress) port https rdr-to fd80:1fe9:fcee:cafe::ace:face
 }
 anchor "layer7_int" on { lan wlan } {
  pass log proto tcp to (athn0) port https
  pass log proto udp to (vether0) port domain
 }
 anchor "layer7_vpn" on { enc tun } {
  pass log proto tcp to (athn0) port https keep state (if-bound)
  pass log proto udp to (vether0) port domain keep state (if-bound)
 }
}

anchor "icmp" {
 anchor "ipv4-icmp" inet proto icmp {
  # https://datatracker.ietf.org/doc/draft-ietf-opsec-icmp-filtering/history/
  # https://tools.ietf.org/html/draft-ietf-opsec-icmp-filtering-04
  pass     log inet proto icmp             icmp-type  3 code  0 keep state (max 32)
  pass     log inet proto icmp             icmp-type  3 code  1 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code  2 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code  2 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code  3 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code  3 keep state (max 32)
  pass     log inet proto icmp             icmp-type  3 code  4 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code  5 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code  5 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code  7 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code 11 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code 11 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code 12 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code 12 keep state (max 32)
  pass     log inet proto icmp             icmp-type  3 code 13 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code 14 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code 14 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code 15 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code 15 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  5 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  5 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  5 code  1 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  5 code  1 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  5 code  2 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  5 code  2 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  5 code  3 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  5 code  3 keep state (max 32)
  pass     log inet proto icmp             icmp-type 11 code  0 keep state (max 32)
  pass     log inet proto icmp             icmp-type 11 code  1 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 12 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 12 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 12 code  1 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 12 code  1 keep state (max 32)
  pass     log inet proto icmp             icmp-type  8 code  0 keep state (max 32)
  pass     log inet proto icmp             icmp-type  0 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 10 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 10 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  9 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  9 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 13 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 13 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 14 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 14 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 17 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 17 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 18 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 18 code  0 keep state (max 32)
 }
 anchor "ipv6-icmp" inet6 proto icmp6 {
  # RFC 4890: Recommendations for Filtering ICMPv6 Messages in Firewalls
  pass     log inet6 proto icmp6             icmp6-type   1 code  0 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   1 code  1 keep state (max 32)
  pass in  log inet6 proto icmp6 to   (self) icmp6-type   1 code  2 keep state (max 32)
  pass out log inet6 proto icmp6 from (self) icmp6-type   1 code  2 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   1 code  3 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   1 code  4 keep state (max 32)
  pass in  log inet6 proto icmp6 to   (self) icmp6-type   1 code  5 keep state (max 32)
  pass out log inet6 proto icmp6 from (self) icmp6-type   1 code  5 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   1 code  6 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   2 code  0 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   3 code  0 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   3 code  1 keep state (max 32)
  pass in  log inet6 proto icmp6 to   (self) icmp6-type   4 code  0 keep state (max 32)
  pass out log inet6 proto icmp6 from (self) icmp6-type   4 code  0 keep state (max 32)
  pass in  log inet6 proto icmp6 to   (self) icmp6-type   4 code  1 keep state (max 32)
  pass out log inet6 proto icmp6 from (self) icmp6-type   4 code  1 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   4 code  2 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type 128 code  0 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type 129 code  0 keep state (max 32)

  # Mobile IPv6 messages that are needed to assist mobility
  pass log inet6 proto icmp6 icmp6-type { 144 145 146 147 }

  # RFC 4890, section 4.4
  # ff02::1: ff00:2:
  pass log inet6 proto icmp6 \
   to { (self) ff02::/16 } \
   icmp6-type { 130 131 132 133 134 135 136 137 141 142 143 148 149 151 152 153 }
 }
}

# Services on [self: keep state] [other: synproxy state]
# (!) Global table manipulation from main ruleset only
# max:               max concurrent connections
# source-track rule: max connections limit by max-src-nodes and max-src-states
#                    (rule per ip, not global)
# max-src-nodes:     max simultaneous sources
# max-src-states:    max simultaneous connection from the same source
# max-src-conn:      max simultaneous established connections from same source
# max-src-conn-rate: max rate of new 3way connections over a time interval (sec)

# Allow traceroute
#pass in log on egress inet proto udp to (egress) port { 33435:33525 }

# Port Knocking Game (nc -z IP PORT)

# 2 knocks on portknock1
#pass in log on egress proto tcp \
# from any to (egress) port $portknock1 \
# synproxy state (max-src-conn 1, overload <portknock1>) \
# tag INET_SELF

# 3 knocks
#pass in log on egress proto tcp \
# from <portknock1> to (egress) port $portknock2 \
# synproxy state (max-src-conn 2, overload <portknock2>) \
# tag INET_SELF

# 2 knocks
#pass in log on egress proto tcp \
# from <portknock2> to (egress) port $portknock3 \
# synproxy state (max-src-conn 1, overload <portknock3>) \
# tag INET_SELF

# Allow successfully port knocked IPs to sshd
#pass in log on egress proto tcp \
# from <portknock3> to (egress) port $portknock3 \
# rdr-to (vether0) port ssh \
# keep state (max 6, source-track rule, max-src-nodes 6, max-src-states 6, \
# max-src-conn 6, max-src-conn-rate 6/30, overload <temporaryban> flush global)

# Schedule

# Schedule Table
#table <schedule_ip> persist

# Scheduled access to SSH
#pass in on egress proto tcp from <schedule_ip> to any port ssh keep-state label sched_ip

# System crontab:
#0 18 * * *	root	/sbin/pfctl -k label -k sched_ip
